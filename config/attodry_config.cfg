global:
    # list of modules to load when starting
    startup: ['man', 'tray', 'pulsestreamer']

    module_server:
        address: 'localhost'
        port: 12345

    ## For controlling the appearance of the GUI:
    stylesheet: 'qdark.qss'

    extensions:
        # ADAPT THIS LOCATION TO YOUR PERSONAL PATH IF NECESSARY
        - ''

hardware:
    
    spm:
        module.Class: 'spm.spm_asc500.SPM_ASC500'
        sync_in_timeout:  0 # in ms
    
    time_tagger:
        module.Class: 'timetagger_counter.TimeTaggerCounter'
        timetagger_channel_apd_0: 1
        pixelclock_begin_chn: 2
        pixelclock_click_chn: 1
        pixelclock_end_chn: 3
        timetagger_channel_detect: 2
        timetagger_channel_next: 3
    
    fastcounter_time_tagger:
        module.Class: 'swabian_instruments.timetagger_fast_counter.TimeTaggerFastCounter'
        timetagger_channel_apd_0: 1
        timetagger_channel_detect: 2
        timetagger_channel_next: 3
        timetagger_channel_sequence: 7
        timetagger_sum_channels: False

    # smiq:
    #     module.Class: 'microwave.mw_source_smiq.MicrowaveSmiq'
    #     gpib_address: 'GPIB0::25::INSTR'
    #     gpib_timeout: 20 # in seconds
    #     frequency_min: 300e3  # optional, in Hz
    #     frequency_max: 3.3e9  # optional, in Hz
    #     power_min: -100  # optional, in dBm
    #     power_max: 0  # optional, in dBm

    mw_source_smbv:
        module.Class: 'microwave.mw_source_smbv.MicrowaveSmbv'
        gpib_address: 'TCPIP::129.69.46.99::inst0::INSTR'
        gpib_timeout: 10

    mw_source_sgs:
        module.Class: 'microwave.mw_source_sgs.MicrowaveSgs'
        gpib_address: 'TCPIP::129.69.46.38::inst0::INSTR'
        gpib_timeout: 10

    confocalscanner_dummy:
        module.Class: 'confocal_scanner_dummy.ConfocalScannerDummy'
        clock_frequency: 100
        connect:
            fitlogic: 'fitlogic'
    
    pulsestreamer:
        module.Class: 'swabian_instruments.pulse_streamer.PulseStreamer'
        pulsestreamer_ip: '129.69.46.68'
        laser_channel: 0
        laser_analog_channel: 0

        uw_x_channel: 5
        use_external_clock: False
        external_clock_option: 0

        pixel_start: 1
        pixel_stop: 2
        sync_in: 3
        mw_trig: 5
        mw_switch: 4
        # 0 - AOM Digital
        # 1 - Timetagger 2 channel
        # 2 - Timetagger 3 channel
        # 3 - ASC500 Sync
        # 4 - MW Switch
        # 5 - MW Trig
        # A0 - AOM Analog
    aps_magnet:
        module.Class: 'magnet.APS_magnet.APSMagnet'
        magnet_address_zx: 'COM3'
        magnet_address_y: 'COM4'

        magnet_x_constr: 0.3 # in Tesla
        magnet_y_constr: 0.3 # in Tesla
        magnet_z_constr: 0.3 # in Tesla
        magnet_rho_constr: 0.3  # in Tesla 
        check_precision: 0.001
    
    awg_spectrum:
        module.Class: 'awg.spectrumAWG_6631.AWG663'
        awg_ip_address: 129.69.46.31
        timeout: 30
        waveform_folder: 'C:\\Users\\yy3\\saved_pulsed_assets\\waveform'
        sequence_folder: 'C:\\Users\\yy3\\saved_pulsed_assets\\sequence'
        # invert_channel: "d_ch2" # Invert switch channel
    
    ocean_spectrometer:
        module.Class: 'spectrometer.oceanoptics_spectrometer.OceanOptics'
        spectrometer_serial: 'QEP02178' #insert here the right serial number.

    level_sensor_lm510:
        module.Class: 'LM510_level_sensor.LM510levelsensor'
        serial_port: 'COM7' #insert here the right serial number.

    temperature_controller_lakeshore_335:
        module.Class: 'lakeshore_335_PID_temperature_controller.temperaturecontroller335'
        serial_port: 'COM8'
        output: 1 #Chose 1 or 2
        mode: 1 #0=off, 1=closed loop PID, 2=zone, 3=open loop, 4=monitor out, 5=warmup supply
        powerup: 0 #0=off, 1=on
        type: 0 #0=current, 1=voltage (valtage only for output 2 possible)
        resistance: 1 #1=25ohm, 2=50ohm of used heater
        max_current: 1 #0=user specified, 1=0.707A, 2=1A, 3=1.141A, 4=1.732A maximum heater output current
        max_current_user: 0 #specifies maximum heater output current for 0=user specified
        input: 'A' #Chose A or B
        sensor_type: 3 #0=Disabled, 1=Diode, 2=Platinum RTD, 3 =NTC RTD, 4 =Thermocouple
        autorange: 1 #0=off, 1=on
        range: 0 #range used when autorange is off. See manual for details
        compensation: 1 #0=off, 1=on
        units: 1 #1=Kelvin, 2=Celsius, 3=Sensor
        curve_number: 21 #Chose number of the used calibration curve.


logic:

    afm_scanner_logic:
        module.Class: 'afm_confocal_logic.AFMConfocalLogic'
        # ADAPT THIS LOCATION TO YOUR PERSONAL PATH
        meas_path: 'C:\\Data\\AttoDRY_Data'
        mw_mode: 'SWEEP'
        # must use LIST mode with SMB100A or most R&S devices since sweep has a duplicated first entry ofr ODMR freq list
        connect:
            spm_device: 'spm'
            savelogic: 'savelogic'
            counter_device: 'time_tagger'
            fitlogic: 'fitlogic'
            pulser: 'pulsestreamer'
            microwave: 'mw_source_smbv' 
            microwave1: 'mw_source_sgs'
            pulsed_master: 'pulsedmasterlogic'
            pulsed_master_AWG: 'pulsedmasterlogic_AWG'
            podmr: 'podmrlogic'
            _pulsed_jupyter_logic: 'pulsedjupyterlogic_AWG'
    
    # pulsedjupyterlogic:
    #     module.Class: 'jupyter_pulsed_logic.PulsedJupyterLogic'
    #     connect:
    #         _afm_scanner_logic: 'afm_scanner_logic'

    pulsedjupyterlogic_AWG:
        module.Class: 'jupyter_pulsed_AWG_master_logic.PulsedJupyterLogic'
        connect:
            _pulsed_master: 'pulsedmasterlogic'
            _pulsed_master_AWG: 'pulsedmasterlogic_AWG'

    kernellogic:
        module.Class: 'jupyterkernel.kernellogic.QudiKernelLogic'
        remoteaccess: True

    counterlogic:
        module.Class: 'counter_logic.CounterLogic'
        connect:
            counter1: 'time_tagger'
            #counter1: 'mq'
            savelogic: 'savelogic'

    odmr_counter_interfuse:
        module.Class: 'interfuse.odmr_counter_pulser_interfuse.ODMRCounterInterfuse'
        IQ_mixer: True
        connect:
            slowcounter: 'time_tagger'
            pulser: 'pulsestreamer'
            AWG: 'awg_spectrum'
            pulse_creator: 'pulsedjupyterlogic_AWG'

    odmrlogic:
        module.Class: 'odmr_logic.ODMRLogic'
        connect:
            odmrcounter: 'odmr_counter_interfuse'
            fitlogic: 'fitlogic'
            microwave1: 'mw_source_smbv'
            savelogic: 'savelogic'
            taskrunner: 'tasklogic'
        scanmode: 'CW'
    
    podmrlogic:
        module.Class: 'podmr_logic.ODMRLogic'
        connect:
            odmrcounter: 'odmr_counter_interfuse'
            fitlogic: 'fitlogic'
            microwave1: 'mw_source_smbv'
            savelogic: 'savelogic'
            taskrunner: 'tasklogic'
            pulsed_master_AWG: 'pulsedmasterlogic_AWG'
            pulse_creator: 'pulsedjupyterlogic_AWG'
    
    BayOptOdmrlogic:
        module.Class: 'bay_opt_odmr_logic.ODMRLogic'
        connect:
            odmrcounter: 'odmr_counter_interfuse'
            fitlogic: 'fitlogic'
            microwave1: 'mw_source_smbv'
            savelogic: 'savelogic'
            taskrunner: 'tasklogic'
        scanmode: 'SWEEP'
    
    fitlogic:
        module.Class: 'fit_logic.FitLogic'

    savelogic:
        module.Class: 'save_logic.SaveLogic'
        # ADAPT THIS LOCATION TO YOUR PERSONAL PATH
        win_data_directory: 'G:\\Data\\Qudi_Data'
        unix_data_directory: 'Data/'
        log_into_daily_directory: True

    tasklogic:
        module.Class: 'taskrunner.TaskRunner'
        tasks:
            scannerLocationRefocus:
                module: 'refocus'
        #        preposttasks: ['fliplasermirror']
                pausetasks: ['scan', 'odmr']
                needsmodules:
                    optimizer: 'optimizerlogic'

    optimizerlogic:
        module.Class: 'optimizer_logic.OptimizerLogic'
        connect:
            confocalscanner1: 'scanner_tilt_interfuse'
            fitlogic: 'fitlogic'

    scanner_tilt_interfuse:
        module.Class: 'interfuse.scanner_tilt_interfuse.ScannerTiltInterfuse'
        connect:
            confocalscanner1: 'confocalscanner_dummy'

    pulsedmasterlogic:
        module.Class: 'pulsed.pulsed_master_logic.PulsedMasterLogic'
        connect:
            pulsedmeasurementlogic: 'pulsedmeasurementlogic'
            sequencegeneratorlogic: 'sequencegeneratorlogic'

    sequencegeneratorlogic:
        module.Class: 'pulsed.sequence_generator_logic.SequenceGeneratorLogic'
        #assets_storage_path: 'C:/Users/<username>/saved_pulsed_assets'
        #additional_predefined_methods_path: 'C:\\Custom_dir'  # optional, can also be lists on several folders
        #additional_sampling_functions_path: 'C:\\Custom_dir'  # optional, can also be lists on several folders
        overhead_bytes: 0  # Not properly implemented yet
        disable_benchmark_prompt: True
        connect:
            pulsegenerator: 'pulsestreamer'

    pulsedmeasurementlogic:
        module.Class: 'pulsed.pulsed_measurement_logic.PulsedMeasurementLogic'
        raw_data_save_type: 'text'  # optional
        #additional_extraction_path: 'C:\\Custom_dir\\Methods'  # optional
        #additional_analysis_path: 'C:\\Custom_dir\\Methods'  # optional
        connect:
            fastcounter: 'fastcounter_time_tagger'
            pulsegenerator: 'pulsestreamer'
            fitlogic: 'fitlogic'
            savelogic: 'savelogic'
            microwave: 'mw_source_smbv'
            microwave1: 'mw_source_sgs'
    
    pulsedmasterlogic_AWG:
        module.Class: 'pulsed.pulsed_master_logic.PulsedMasterLogic'
        connect:
            pulsedmeasurementlogic: 'pulsedmeasurementlogic_AWG'
            sequencegeneratorlogic: 'sequencegeneratorlogic_AWG'

    sequencegeneratorlogic_AWG:
        module.Class: 'pulsed.sequence_generator_logic.SequenceGeneratorLogic'
        assets_storage_path: 'C:\\Users\\yy3\\saved_pulsed_assets\\sequence'
        #additional_predefined_methods_path: 'C:\\Custom_dir'  # optional, can also be lists on several folders
        #additional_sampling_functions_path: 'C:\\Custom_dir'  # optional, can also be lists on several folders
        overhead_bytes: 0  # Not properly implemented yet
        disable_benchmark_prompt: True
        connect:
            pulsegenerator: 'awg_spectrum'

    pulsedmeasurementlogic_AWG:
        module.Class: 'pulsed.pulsed_measurement_logic.PulsedMeasurementLogic'
        raw_data_save_type: 'text'  # optional
        #additional_extraction_path: 'C:\\Custom_dir\\Methods'  # optional
        #additional_analysis_path: 'C:\\Custom_dir\\Methods'  # optional
        connect:
            fastcounter: 'fastcounter_time_tagger'
            pulsegenerator: 'awg_spectrum'
            fitlogic: 'fitlogic'
            savelogic: 'savelogic'
            microwave: 'mw_source_smbv'
            microwave1: 'mw_source_sgs'
    
    magnetlogic:
        module.Class: 'magnet_vector_logic.MagnetLogic'
        connect:
            magnetstage: 'aps_magnet'
            counterlogic: 'counterlogic'
            savelogic: 'savelogic'
            fitlogic: 'fitlogic'
            qafmlogic: 'afm_scanner_logic'
    
    qdplotlogic:
        module.Class: 'qdplot_logic.QDPlotLogic'
        default_plot_number: 3
        connect:
            save_logic: 'savelogic'
            fit_logic: 'fitlogic'

    spectrumlogic:
        module.Class: 'spectrum.SpectrumLogic'
        connect:
            spectrometer: 'ocean_spectrometer'
            savelogic: 'savelogic'
            fitlogic: 'fitlogic'

    tip_temp_controller_pid_logic:
        module.Class: 'pid_logic.PIDLogic'
        timestep: 1
        connect:
            controller: 'temperature_controller_lakeshore_335'
            savelogic: 'savelogic'

    LN2_level_sensor_logic:
        module.Class: 'levelsensor_logic.LevelsensorLogic'
        timestep: 1
        connect:
            controller: 'level_sensor_lm510'
            savelogic: 'savelogic'

gui:
    tray:
        module.Class: 'trayicon.TrayIcon'

    man:
        module.Class: 'manager.managergui.ManagerGui'

    qafm_gui:
        module.Class: 'qafm.qafm_gui.ProteusQGUI'
        color_map: 'bwr'
        connect:
            qafmlogic: 'afm_scanner_logic'

    counter:
        module.Class: 'counter.countergui.CounterGui'
        connect:
            counterlogic1: 'counterlogic'

    odmr:
        module.Class: 'odmr.odmrgui.ODMRGui'
        connect:
            odmrlogic1: 'odmrlogic'
            savelogic: 'savelogic'
    
    podmr:
        module.Class: 'podmr.odmrgui.ODMRGui'
        connect:
            odmrlogic1: 'podmrlogic'
            savelogic: 'savelogic'
    
    BayOptOdmr:
        module.Class: 'bay_opt_odmr.odmrgui.ODMRGui'
        connect:
            odmrlogic1: 'BayOptOdmrlogic'
            savelogic: 'savelogic'

    pulsedmeasurement:
        module.Class: 'pulsed.pulsed_maingui.PulsedMeasurementGui'
        connect:
            pulsedmasterlogic: 'pulsedmasterlogic'
    
    pulsedmeasurement_AWG:
        module.Class: 'pulsed.pulsed_maingui.PulsedMeasurementGui'
        connect:
            pulsedmasterlogic: 'pulsedmasterlogic_AWG'
    
    magnet:
        module.Class: 'magnet.magnet_vector_gui.MagnetGui'
        connect:
            magnetlogic1: 'magnetlogic'
            savelogic: 'savelogic'
    
    qdplotter:
        module.Class: 'qdplotter.qdplotter_gui.QDPlotterGui'
        pen_color_list: ['b', 'y', 'm', 'g']
        connect:
            qdplot_logic: 'qdplotlogic'

    spectrometer:
        module.Class: 'spectrometer.spectrometergui.SpectrometerGui'
        connect:
            spectrumlogic: 'spectrumlogic'

    tip_temp_controller:
        module.Class: 'pidgui.pidgui.PIDGui'
        control_unit: '%'
        process_unit: 'K'
        connect:
            pidlogic: 'tip_temp_controller_pid_logic'

    LN2_level_sensor:
        module.Class: 'levelsensor.levelsensorgui.LevelsensorGui'
        control_unit: '%'
        connect:
            levelsensorlogic: 'LN2_level_sensor_logic'
